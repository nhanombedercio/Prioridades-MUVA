}
})
output$previsao_termino <- renderText({
format(data_final, "%d/%m/%Y %H:%M:%S")  # Exibi√ß√£o da data final formatada
})
output$lista_prioridades <- renderUI({
prioridades_ordenadas <- prioridades[order(sapply(prioridades, function(p) p$deadline), decreasing = TRUE)]
lapply(rev(prioridades_ordenadas), function(p) {
status <- ifelse(progresso >= 100, "Fora do prazo!", "A ser Realizado")
progresso <- max(0, min(100, as.numeric(difftime(Sys.time(), data_inicio, units = "secs")) / as.numeric(difftime(p$deadline, data_inicio, units = "secs")) * 100))
cor_barra <- ifelse(progresso >= 100, "progress-bar-danger", "progress-bar")
tagList(
h5(paste(p$nome, "- Data limite:", format(p$deadline, "%d/%m/%Y"))),  # Nome da prioridade e data limite
div(class = "progress",
div(class = paste("progress-bar", cor_barra),
role = "progressbar",
style = paste0("width: ", progresso, "%"),
ifelse(progresso >= 100, "Fora do prazo!", paste0(round(100 - progresso, 1), "% at√© o prazo final"))
)
),
#p(paste("Status:", status), style = "font-size: 14px; color: #30E3CA;"),
p(paste("Respons√°vel:", p$responsavel), style = "font-size: 14px; color: #30E3CA;")  # Exibi√ß√£o do respons√°vel
)
})
})
}
# Executar o app
shinyApp(ui = ui, server = server)  # Inicializa√ß√£o do aplicativo Shiny
library(shiny)  # Biblioteca principal para cria√ß√£o de aplicativos interativos
library(lubridate)  # Para manipula√ß√£o de datas
library(bslib)  # Para aplicar um tema baseado na identidade MUVA
# Definir a data de in√≠cio e data final (90 dias ap√≥s 3 de fevereiro)
data_inicio <- as.POSIXct("2025-02-03", format = "%Y-%m-%d", tz = "UTC")
data_final <- data_inicio + days(90)
# Lista de prioridades com datas reais de limite
prioridades <- list(
list(nome = "Rever as responsabilidades dos PM", deadline = as.POSIXct("2025-02-29", format = "%Y-%m-%d", tz = "UTC"), responsavel = "-"),
list(nome = "Plano de comunica√ß√£o para 2025", deadline = as.POSIXct("2025-02-13", format = "%Y-%m-%d", tz = "UTC"), responsavel = "Rebeca"),
list(nome = "Revisar pagamento meio-MELS", deadline = as.POSIXct("2025-02-20", format = "%Y-%m-%d", tz = "UTC"), responsavel = "Ana"),
list(nome = "Mesa redonda sobre empregabilidade", deadline = as.POSIXct("2025-03-13", format = "%Y-%m-%d", tz = "UTC"), responsavel = "-"),
list(nome = "Pol√≠tica de RH", deadline = as.POSIXct("2025-03-06", format = "%Y-%m-%d", tz = "UTC"), responsavel = "Inocencio"),
list(nome = "Finalizar transi√ß√£o para Funda√ß√£o", deadline = as.POSIXct("2025-03-06", format = "%Y-%m-%d", tz = "UTC"), responsavel = "Luize & Lucia"),
list(nome = "Rever aloca√ß√£o da equipe de opera√ß√£o", deadline = as.POSIXct("2025-03-06", format = "%Y-%m-%d", tz = "UTC"), responsavel = "Inocencio"),
list(nome = "Trabalhar a liga√ß√£o territorial e OCBs", deadline = as.POSIXct("2025-03-06", format = "%Y-%m-%d", tz = "UTC"), responsavel = "Lucia, Tania & Suraia"),
list(nome = "Calend√°rio chin√™s digital", deadline = as.POSIXct("2025-04-28", format = "%Y-%m-%d", tz = "UTC"), responsavel = "Dercio")
)
# Interface do usu√°rio (UI)
ui <- fluidPage(
theme = bs_theme(bg = "#6B4FA4", fg = "#30E3CA", primary = "#FF8F4E"),  # Aplica√ß√£o do tema baseado na identidade MUVA
tags$head(
tags$style(HTML("#relogio { font-size: 50px; text-align: center; font-weight: bold; color: #FF8F4E; } .card { padding: 20px; border-radius: 10px; box-shadow: 0px 0px 10px rgba(255, 255, 255, 0.1); margin-bottom: 15px; background-color: #512D6D; color: #FFFFFF; } .progress-bar { font-size: 14px; text-align: center; color: black; background-color: #30E3CA; } h3 { font-weight: bold; text-align: center; color: #FF8F4E; } .progress-bar-danger { background-color: #FF4C4C; }"))
),
div(class = "card",
h3("‚è≥ Controle de Prazos: Corra Que Ainda D√° Tempo!"),
div(id = "relogio", textOutput("contador")),  # Exibi√ß√£o do tempo restante
h4("Previs√£o de t√©rmino:", align = "center"),
tags$div(style = "text-align: center; font-size: 18px;", textOutput("previsao_termino"))
),
div(class = "card",
h3("üìä Planeamento em A√ß√£o: Porqu√™ Deixar para Depois?"),
uiOutput("lista_prioridades")  # Exibi√ß√£o din√¢mica das prioridades
)
)
# Servidor
server <- function(input, output, session) {
autoInvalidate <- reactiveTimer(1000)  # Atualiza√ß√£o autom√°tica a cada segundo
output$contador <- renderText({
autoInvalidate()
tempo_restante <- as.numeric(difftime(data_final, Sys.time(), units = "secs"))
if (tempo_restante > 0) {
dias <- as.integer(tempo_restante %/% (24 * 3600))
horas <- as.integer((tempo_restante %% (24 * 3600)) %/% 3600)
minutos <- as.integer((tempo_restante %% 3600) %/% 60)
segundos <- as.integer(tempo_restante %% 60)
sprintf("%02d dias | %02d:%02d:%02d", dias, horas, minutos, segundos)  # Formato grande e destacado
} else {
"00:00:00:00"
}
})
output$previsao_termino <- renderText({
format(data_final, "%d/%m/%Y %H:%M:%S")  # Exibi√ß√£o da data final formatada
})
output$lista_prioridades <- renderUI({
prioridades_ordenadas <- prioridades[order(sapply(prioridades, function(p) p$deadline), decreasing = TRUE)]
lapply(rev(prioridades_ordenadas), function(p) {
status <- ifelse(progresso >= 100, "Fora do prazo!", "A ser Realizado")
progresso <- max(0, min(100, as.numeric(difftime(Sys.time(), data_inicio, units = "secs")) / as.numeric(difftime(p$deadline, data_inicio, units = "secs")) * 100))
cor_barra <- ifelse(progresso >= 100, "progress-bar-danger", "progress-bar")
tagList(
h5(paste(p$nome, "- Data limite:", format(p$deadline, "%d/%m/%Y"))),  # Nome da prioridade e data limite
div(class = "progress",
div(class = paste("progress-bar", cor_barra),
role = "progressbar",
style = paste0("width: ", progresso, "%"),
ifelse(progresso >= 100, "Fora do prazo!", paste0(round(100 - progresso, 1), "% at√© o prazo final"))
)
),
p(paste("Status:", status), style = "font-size: 14px; color: #30E3CA;"),
p(style = "font-size: 14px; color: #30E3CA; display: flex; justify-content: space-between;",
span(paste("Respons√°vel:", p$responsavel)),
span(paste("Status:", status))), style = "font-size: 14px; color: #30E3CA;")  # Exibi√ß√£o do respons√°vel
)
library(shiny)  # Biblioteca principal para cria√ß√£o de aplicativos interativos
library(lubridate)  # Para manipula√ß√£o de datas
library(bslib)  # Para aplicar um tema baseado na identidade MUVA
# Definir a data de in√≠cio e data final (90 dias ap√≥s 3 de fevereiro)
data_inicio <- as.POSIXct("2025-02-03", format = "%Y-%m-%d", tz = "UTC")
data_final <- data_inicio + days(90)
# Lista de prioridades com datas reais de limite
prioridades <- list(
list(nome = "Rever as responsabilidades dos PM", deadline = as.POSIXct("2025-02-29", format = "%Y-%m-%d", tz = "UTC"), responsavel = "-"),
list(nome = "Plano de comunica√ß√£o para 2025", deadline = as.POSIXct("2025-02-13", format = "%Y-%m-%d", tz = "UTC"), responsavel = "Rebeca"),
list(nome = "Revisar pagamento meio-MELS", deadline = as.POSIXct("2025-02-20", format = "%Y-%m-%d", tz = "UTC"), responsavel = "Ana"),
list(nome = "Mesa redonda sobre empregabilidade", deadline = as.POSIXct("2025-03-13", format = "%Y-%m-%d", tz = "UTC"), responsavel = "-"),
list(nome = "Pol√≠tica de RH", deadline = as.POSIXct("2025-03-06", format = "%Y-%m-%d", tz = "UTC"), responsavel = "Inocencio"),
list(nome = "Finalizar transi√ß√£o para Funda√ß√£o", deadline = as.POSIXct("2025-03-06", format = "%Y-%m-%d", tz = "UTC"), responsavel = "Luize & Lucia"),
list(nome = "Rever aloca√ß√£o da equipe de opera√ß√£o", deadline = as.POSIXct("2025-03-06", format = "%Y-%m-%d", tz = "UTC"), responsavel = "Inocencio"),
list(nome = "Trabalhar a liga√ß√£o territorial e OCBs", deadline = as.POSIXct("2025-03-06", format = "%Y-%m-%d", tz = "UTC"), responsavel = "Lucia, Tania & Suraia"),
list(nome = "Calend√°rio chin√™s digital", deadline = as.POSIXct("2025-04-28", format = "%Y-%m-%d", tz = "UTC"), responsavel = "Dercio")
)
# Interface do usu√°rio (UI)
ui <- fluidPage(
theme = bs_theme(bg = "#6B4FA4", fg = "#30E3CA", primary = "#FF8F4E"),  # Aplica√ß√£o do tema baseado na identidade MUVA
tags$head(
tags$style(HTML("#relogio { font-size: 50px; text-align: center; font-weight: bold; color: #FF8F4E; } .card { padding: 20px; border-radius: 10px; box-shadow: 0px 0px 10px rgba(255, 255, 255, 0.1); margin-bottom: 15px; background-color: #512D6D; color: #FFFFFF; } .progress-bar { font-size: 14px; text-align: center; color: black; background-color: #30E3CA; } h3 { font-weight: bold; text-align: center; color: #FF8F4E; } .progress-bar-danger { background-color: #FF4C4C; }"))
),
div(class = "card",
h3("‚è≥ Controle de Prazos: Corra Que Ainda D√° Tempo!"),
div(id = "relogio", textOutput("contador")),  # Exibi√ß√£o do tempo restante
h4("Previs√£o de t√©rmino:", align = "center"),
tags$div(style = "text-align: center; font-size: 18px;", textOutput("previsao_termino"))
),
div(class = "card",
h3("üìä Planeamento em A√ß√£o: Porqu√™ Deixar para Depois?"),
uiOutput("lista_prioridades")  # Exibi√ß√£o din√¢mica das prioridades
)
)
# Servidor
server <- function(input, output, session) {
autoInvalidate <- reactiveTimer(1000)  # Atualiza√ß√£o autom√°tica a cada segundo
output$contador <- renderText({
autoInvalidate()
tempo_restante <- as.numeric(difftime(data_final, Sys.time(), units = "secs"))
if (tempo_restante > 0) {
dias <- as.integer(tempo_restante %/% (24 * 3600))
horas <- as.integer((tempo_restante %% (24 * 3600)) %/% 3600)
minutos <- as.integer((tempo_restante %% 3600) %/% 60)
segundos <- as.integer(tempo_restante %% 60)
sprintf("%02d dias | %02d:%02d:%02d", dias, horas, minutos, segundos)  # Formato grande e destacado
} else {
"00:00:00:00"
}
})
output$previsao_termino <- renderText({
format(data_final, "%d/%m/%Y %H:%M:%S")  # Exibi√ß√£o da data final formatada
})
output$lista_prioridades <- renderUI({
prioridades_ordenadas <- prioridades[order(sapply(prioridades, function(p) p$deadline), decreasing = TRUE)]
lapply(rev(prioridades_ordenadas), function(p) {
status <- ifelse(progresso >= 100, "Fora do prazo!", "A ser Realizado")
progresso <- max(0, min(100, as.numeric(difftime(Sys.time(), data_inicio, units = "secs")) / as.numeric(difftime(p$deadline, data_inicio, units = "secs")) * 100))
cor_barra <- ifelse(progresso >= 100, "progress-bar-danger", "progress-bar")
tagList(
h5(paste(p$nome, "- Data limite:", format(p$deadline, "%d/%m/%Y"))),  # Nome da prioridade e data limite
div(class = "progress",
div(class = paste("progress-bar", cor_barra),
role = "progressbar",
style = paste0("width: ", progresso, "%"),
ifelse(progresso >= 100, "Fora do prazo!", paste0(round(100 - progresso, 1), "% at√© o prazo final"))
)
),
p(paste("Status:", status), style = "font-size: 14px; color: #30E3CA;"),
p(style = "font-size: 14px; color: #30E3CA; display: flex; justify-content: space-between;",
span(paste("Respons√°vel:", p$responsavel)),
span(style = "margin-left: auto;", paste("Status:", status)))),
library(shiny)  # Biblioteca principal para cria√ß√£o de aplicativos interativos
library(lubridate)  # Para manipula√ß√£o de datas
library(bslib)  # Para aplicar um tema baseado na identidade MUVA
# Definir a data de in√≠cio e data final (90 dias ap√≥s 3 de fevereiro)
data_inicio <- as.POSIXct("2025-02-03", format = "%Y-%m-%d", tz = "UTC")
data_final <- data_inicio + days(90)
# Lista de prioridades com datas reais de limite
prioridades <- list(
list(nome = "Rever as responsabilidades dos PM", deadline = as.POSIXct("2025-02-29", format = "%Y-%m-%d", tz = "UTC"), responsavel = "-"),
list(nome = "Plano de comunica√ß√£o para 2025", deadline = as.POSIXct("2025-02-13", format = "%Y-%m-%d", tz = "UTC"), responsavel = "Rebeca"),
list(nome = "Revisar pagamento meio-MELS", deadline = as.POSIXct("2025-02-20", format = "%Y-%m-%d", tz = "UTC"), responsavel = "Ana"),
list(nome = "Mesa redonda sobre empregabilidade", deadline = as.POSIXct("2025-03-13", format = "%Y-%m-%d", tz = "UTC"), responsavel = "-"),
list(nome = "Pol√≠tica de RH", deadline = as.POSIXct("2025-03-06", format = "%Y-%m-%d", tz = "UTC"), responsavel = "Inocencio"),
list(nome = "Finalizar transi√ß√£o para Funda√ß√£o", deadline = as.POSIXct("2025-03-06", format = "%Y-%m-%d", tz = "UTC"), responsavel = "Luize & Lucia"),
list(nome = "Rever aloca√ß√£o da equipe de opera√ß√£o", deadline = as.POSIXct("2025-03-06", format = "%Y-%m-%d", tz = "UTC"), responsavel = "Inocencio"),
list(nome = "Trabalhar a liga√ß√£o territorial e OCBs", deadline = as.POSIXct("2025-03-06", format = "%Y-%m-%d", tz = "UTC"), responsavel = "Lucia, Tania & Suraia"),
list(nome = "Calend√°rio chin√™s digital", deadline = as.POSIXct("2025-04-28", format = "%Y-%m-%d", tz = "UTC"), responsavel = "Dercio")
)
# Interface do usu√°rio (UI)
ui <- fluidPage(
theme = bs_theme(bg = "#6B4FA4", fg = "#30E3CA", primary = "#FF8F4E"),  # Aplica√ß√£o do tema baseado na identidade MUVA
tags$head(
tags$style(HTML("#relogio { font-size: 50px; text-align: center; font-weight: bold; color: #FF8F4E; } .card { padding: 20px; border-radius: 10px; box-shadow: 0px 0px 10px rgba(255, 255, 255, 0.1); margin-bottom: 15px; background-color: #512D6D; color: #FFFFFF; } .progress-bar { font-size: 14px; text-align: center; color: black; background-color: #30E3CA; } h3 { font-weight: bold; text-align: center; color: #FF8F4E; } .progress-bar-danger { background-color: #FF4C4C; }"))
),
div(class = "card",
h3("‚è≥ Controle de Prazos: Corra Que Ainda D√° Tempo!"),
div(id = "relogio", textOutput("contador")),  # Exibi√ß√£o do tempo restante
h4("Previs√£o de t√©rmino:", align = "center"),
tags$div(style = "text-align: center; font-size: 18px;", textOutput("previsao_termino"))
),
div(class = "card",
h3("üìä Planeamento em A√ß√£o: Porqu√™ Deixar para Depois?"),
uiOutput("lista_prioridades")  # Exibi√ß√£o din√¢mica das prioridades
)
)
# Servidor
server <- function(input, output, session) {
autoInvalidate <- reactiveTimer(1000)  # Atualiza√ß√£o autom√°tica a cada segundo
output$contador <- renderText({
autoInvalidate()
tempo_restante <- as.numeric(difftime(data_final, Sys.time(), units = "secs"))
if (tempo_restante > 0) {
dias <- as.integer(tempo_restante %/% (24 * 3600))
horas <- as.integer((tempo_restante %% (24 * 3600)) %/% 3600)
minutos <- as.integer((tempo_restante %% 3600) %/% 60)
segundos <- as.integer(tempo_restante %% 60)
sprintf("%02d dias | %02d:%02d:%02d", dias, horas, minutos, segundos)  # Formato grande e destacado
} else {
"00:00:00:00"
}
})
output$previsao_termino <- renderText({
format(data_final, "%d/%m/%Y %H:%M:%S")  # Exibi√ß√£o da data final formatada
})
output$lista_prioridades <- renderUI({
prioridades_ordenadas <- prioridades[order(sapply(prioridades, function(p) p$deadline), decreasing = TRUE)]
lapply(rev(prioridades_ordenadas), function(p) {
status <- ifelse(progresso >= 100, "Fora do prazo!", "A ser Realizado")
progresso <- max(0, min(100, as.numeric(difftime(Sys.time(), data_inicio, units = "secs")) / as.numeric(difftime(p$deadline, data_inicio, units = "secs")) * 100))
cor_barra <- ifelse(progresso >= 100, "progress-bar-danger", "progress-bar")
tagList(
h5(paste(p$nome, "- Data limite:", format(p$deadline, "%d/%m/%Y"))),  # Nome da prioridade e data limite
div(class = "progress",
div(class = paste("progress-bar", cor_barra),
role = "progressbar",
style = paste0("width: ", progresso, "%"),
ifelse(progresso >= 100, "Fora do prazo!", paste0(round(100 - progresso, 1), "% at√© o prazo final"))
)
),
p(style = "font-size: 14px; color: #30E3CA; display: flex; justify-content: space-between;",
span(paste("Respons√°vel:", p$responsavel)),
span(style = "margin-left: auto;", paste("Status:", status)))),
library(shiny)  # Biblioteca principal para cria√ß√£o de aplicativos interativos
library(lubridate)  # Para manipula√ß√£o de datas
library(bslib)  # Para aplicar um tema baseado na identidade MUVA
# Definir a data de in√≠cio e data final (90 dias ap√≥s 3 de fevereiro)
data_inicio <- as.POSIXct("2025-02-03", format = "%Y-%m-%d", tz = "UTC")
data_final <- data_inicio + days(90)
# Lista de prioridades com datas reais de limite
prioridades <- list(
list(nome = "Rever as responsabilidades dos PM", deadline = as.POSIXct("2025-02-29", format = "%Y-%m-%d", tz = "UTC"), responsavel = "-"),
list(nome = "Plano de comunica√ß√£o para 2025", deadline = as.POSIXct("2025-02-13", format = "%Y-%m-%d", tz = "UTC"), responsavel = "Rebeca"),
list(nome = "Revisar pagamento meio-MELS", deadline = as.POSIXct("2025-02-20", format = "%Y-%m-%d", tz = "UTC"), responsavel = "Ana"),
list(nome = "Mesa redonda sobre empregabilidade", deadline = as.POSIXct("2025-03-13", format = "%Y-%m-%d", tz = "UTC"), responsavel = "-"),
list(nome = "Pol√≠tica de RH", deadline = as.POSIXct("2025-03-06", format = "%Y-%m-%d", tz = "UTC"), responsavel = "Inocencio"),
list(nome = "Finalizar transi√ß√£o para Funda√ß√£o", deadline = as.POSIXct("2025-03-06", format = "%Y-%m-%d", tz = "UTC"), responsavel = "Luize & Lucia"),
list(nome = "Rever aloca√ß√£o da equipe de opera√ß√£o", deadline = as.POSIXct("2025-03-06", format = "%Y-%m-%d", tz = "UTC"), responsavel = "Inocencio"),
list(nome = "Trabalhar a liga√ß√£o territorial e OCBs", deadline = as.POSIXct("2025-03-06", format = "%Y-%m-%d", tz = "UTC"), responsavel = "Lucia, Tania & Suraia"),
list(nome = "Calend√°rio chin√™s digital", deadline = as.POSIXct("2025-04-28", format = "%Y-%m-%d", tz = "UTC"), responsavel = "Dercio")
)
# Interface do usu√°rio (UI)
ui <- fluidPage(
theme = bs_theme(bg = "#6B4FA4", fg = "#30E3CA", primary = "#FF8F4E"),  # Aplica√ß√£o do tema baseado na identidade MUVA
tags$head(
tags$style(HTML("#relogio { font-size: 50px; text-align: center; font-weight: bold; color: #FF8F4E; } .card { padding: 20px; border-radius: 10px; box-shadow: 0px 0px 10px rgba(255, 255, 255, 0.1); margin-bottom: 15px; background-color: #512D6D; color: #FFFFFF; } .progress-bar { font-size: 14px; text-align: center; color: black; background-color: #30E3CA; } h3 { font-weight: bold; text-align: center; color: #FF8F4E; } .progress-bar-danger { background-color: #FF4C4C; }"))
),
div(class = "card",
h3("‚è≥ Controle de Prazos: Corra Que Ainda D√° Tempo!"),
div(id = "relogio", textOutput("contador")),  # Exibi√ß√£o do tempo restante
h4("Previs√£o de t√©rmino:", align = "center"),
tags$div(style = "text-align: center; font-size: 18px;", textOutput("previsao_termino"))
),
div(class = "card",
h3("üìä Planeamento em A√ß√£o: Porqu√™ Deixar para Depois?"),
uiOutput("lista_prioridades")  # Exibi√ß√£o din√¢mica das prioridades
)
)
# Servidor
server <- function(input, output, session) {
autoInvalidate <- reactiveTimer(1000)  # Atualiza√ß√£o autom√°tica a cada segundo
output$contador <- renderText({
autoInvalidate()
tempo_restante <- as.numeric(difftime(data_final, Sys.time(), units = "secs"))
if (tempo_restante > 0) {
dias <- as.integer(tempo_restante %/% (24 * 3600))
horas <- as.integer((tempo_restante %% (24 * 3600)) %/% 3600)
minutos <- as.integer((tempo_restante %% 3600) %/% 60)
segundos <- as.integer(tempo_restante %% 60)
sprintf("%02d dias | %02d:%02d:%02d", dias, horas, minutos, segundos)  # Formato grande e destacado
} else {
"00:00:00:00"
}
})
output$previsao_termino <- renderText({
format(data_final, "%d/%m/%Y %H:%M:%S")  # Exibi√ß√£o da data final formatada
})
output$lista_prioridades <- renderUI({
prioridades_ordenadas <- prioridades[order(sapply(prioridades, function(p) p$deadline), decreasing = TRUE)]
lapply(rev(prioridades_ordenadas), function(p) {
status <- ifelse(progresso >= 100, "Fora do prazo!", "A ser Realizado")
progresso <- max(0, min(100, as.numeric(difftime(Sys.time(), data_inicio, units = "secs")) / as.numeric(difftime(p$deadline, data_inicio, units = "secs")) * 100))
cor_barra <- ifelse(progresso >= 100, "progress-bar-danger", "progress-bar")
tagList(
h5(paste(p$nome, "- Data limite:", format(p$deadline, "%d/%m/%Y"))),  # Nome da prioridade e data limite
div(class = "progress",
div(class = paste("progress-bar", cor_barra),
role = "progressbar",
style = paste0("width: ", progresso, "%"),
ifelse(progresso >= 100, "Fora do prazo!", paste0(round(100 - progresso, 1), "% at√© o prazo final"))
)
),
p(style = "font-size: 14px; color: #30E3CA; display: flex; justify-content: space-between;",
span(paste("Respons√°vel:", p$responsavel)),
span(style = "margin-left: auto;", paste("Status:", status)))),
runApp()
runApp()
runApp()
runApp()
library(shiny)  # Biblioteca principal para cria√ß√£o de aplicativos interativos
library(lubridate)  # Para manipula√ß√£o de datas
library(bslib)  # Para aplicar um tema baseado na identidade MUVA
# Definir a data de in√≠cio e data final (90 dias ap√≥s 3 de fevereiro)
data_inicio <- as.POSIXct("2025-02-03", format = "%Y-%m-%d", tz = "UTC")
data_final <- data_inicio + days(90)
# Lista de prioridades com datas reais de limite
prioridades <- list(
list(nome = "Rever as responsabilidades dos PM", deadline = as.POSIXct("2025-02-29", format = "%Y-%m-%d", tz = "UTC"), responsavel = "-"),
list(nome = "Plano de comunica√ß√£o para 2025", deadline = as.POSIXct("2025-02-13", format = "%Y-%m-%d", tz = "UTC"), responsavel = "Rebeca"),
list(nome = "Revisar pagamento meio-MELS", deadline = as.POSIXct("2025-02-20", format = "%Y-%m-%d", tz = "UTC"), responsavel = "Ana"),
list(nome = "Mesa redonda sobre empregabilidade", deadline = as.POSIXct("2025-03-13", format = "%Y-%m-%d", tz = "UTC"), responsavel = "-"),
list(nome = "Pol√≠tica de RH", deadline = as.POSIXct("2025-03-06", format = "%Y-%m-%d", tz = "UTC"), responsavel = "Inocencio"),
list(nome = "Finalizar transi√ß√£o para Funda√ß√£o", deadline = as.POSIXct("2025-03-06", format = "%Y-%m-%d", tz = "UTC"), responsavel = "Luize & Lucia"),
list(nome = "Rever aloca√ß√£o da equipe de opera√ß√£o", deadline = as.POSIXct("2025-03-06", format = "%Y-%m-%d", tz = "UTC"), responsavel = "Inocencio"),
list(nome = "Trabalhar a liga√ß√£o territorial e OCBs", deadline = as.POSIXct("2025-03-06", format = "%Y-%m-%d", tz = "UTC"), responsavel = "Lucia, Tania & Suraia"),
list(nome = "Calend√°rio chin√™s digital", deadline = as.POSIXct("2025-04-28", format = "%Y-%m-%d", tz = "UTC"), responsavel = "Dercio")
)
# Interface do usu√°rio (UI)
ui <- fluidPage(
theme = bs_theme(bg = "#6B4FA4", fg = "#30E3CA", primary = "#FF8F4E"),  # Aplica√ß√£o do tema baseado na identidade MUVA
tags$head(
tags$style(HTML("#relogio { font-size: 50px; text-align: center; font-weight: bold; color: #FF8F4E; } .card { padding: 20px; border-radius: 10px; box-shadow: 0px 0px 10px rgba(255, 255, 255, 0.1); margin-bottom: 15px; background-color: #512D6D; color: #FFFFFF; } .progress-bar { font-size: 14px; text-align: center; color: black; background-color: #30E3CA; } h3 { font-weight: bold; text-align: center; color: #FF8F4E; } .progress-bar-danger { background-color: #FF4C4C; }"))
),
div(class = "card",
h3("‚è≥ Controle de Prazos: Corra Que Ainda D√° Tempo!"),
div(id = "relogio", textOutput("contador")),  # Exibi√ß√£o do tempo restante
h4("Previs√£o de t√©rmino:", align = "center"),
tags$div(style = "text-align: center; font-size: 18px;", textOutput("previsao_termino"))
),
div(class = "card",
h3("üìä Planeamento em A√ß√£o: Porqu√™ Deixar para Depois?"),
uiOutput("lista_prioridades")  # Exibi√ß√£o din√¢mica das prioridades
)
)
# Servidor
server <- function(input, output, session) {
autoInvalidate <- reactiveTimer(1000)  # Atualiza√ß√£o autom√°tica a cada segundo
output$contador <- renderText({
autoInvalidate()
tempo_restante <- as.numeric(difftime(data_final, Sys.time(), units = "secs"))
if (tempo_restante > 0) {
dias <- as.integer(tempo_restante %/% (24 * 3600))
horas <- as.integer((tempo_restante %% (24 * 3600)) %/% 3600)
minutos <- as.integer((tempo_restante %% 3600) %/% 60)
segundos <- as.integer(tempo_restante %% 60)
sprintf("%02d dias | %02d:%02d:%02d", dias, horas, minutos, segundos)  # Formato grande e destacado
} else {
"00:00:00:00"
}
})
output$previsao_termino <- renderText({
format(data_final, "%d/%m/%Y %H:%M:%S")  # Exibi√ß√£o da data final formatada
})
output$lista_prioridades <- renderUI({
prioridades_ordenadas <- prioridades[order(sapply(prioridades, function(p) p$deadline), decreasing = TRUE)]
lapply(rev(prioridades_ordenadas), function(p) {
status <- ifelse(progresso >= 100, "Fora do prazo!", "A ser Realizado")
progresso <- max(0, min(100, as.numeric(difftime(Sys.time(), data_inicio, units = "secs")) / as.numeric(difftime(p$deadline, data_inicio, units = "secs")) * 100))
cor_barra <- ifelse(progresso >= 100, "progress-bar-danger", "progress-bar")
tagList(
h5(paste(p$nome, "- Data limite:", format(p$deadline, "%d/%m/%Y"))),  # Nome da prioridade e data limite
div(class = "progress",
div(class = paste("progress-bar", cor_barra),
role = "progressbar",
style = paste0("width: ", progresso, "%"),
ifelse(progresso >= 100, "Fora do prazo!", paste0(round(100 - progresso, 1), "% at√© o prazo final"))
)
),
p(style = "font-size: 14px; color: #30E3CA; display: flex; justify-content: space-between;",
span(paste("Respons√°vel:", p$responsavel)),
span(style = "margin-left: 2cm;", paste("Status:", status)))),
library(shiny)  # Biblioteca principal para cria√ß√£o de aplicativos interativos
library(lubridate)  # Para manipula√ß√£o de datas
library(bslib)  # Para aplicar um tema baseado na identidade MUVA
# Definir a data de in√≠cio e data final (90 dias ap√≥s 3 de fevereiro)
data_inicio <- as.POSIXct("2025-02-03", format = "%Y-%m-%d", tz = "UTC")
data_final <- data_inicio + days(90)
# Lista de prioridades com datas reais de limite
prioridades <- list(
list(nome = "Rever as responsabilidades dos PM", deadline = as.POSIXct("2025-02-29", format = "%Y-%m-%d", tz = "UTC"), responsavel = "-"),
list(nome = "Plano de comunica√ß√£o para 2025", deadline = as.POSIXct("2025-02-13", format = "%Y-%m-%d", tz = "UTC"), responsavel = "Rebeca"),
list(nome = "Revisar pagamento meio-MELS", deadline = as.POSIXct("2025-02-20", format = "%Y-%m-%d", tz = "UTC"), responsavel = "Ana"),
list(nome = "Mesa redonda sobre empregabilidade", deadline = as.POSIXct("2025-03-13", format = "%Y-%m-%d", tz = "UTC"), responsavel = "-"),
list(nome = "Pol√≠tica de RH", deadline = as.POSIXct("2025-03-06", format = "%Y-%m-%d", tz = "UTC"), responsavel = "Inocencio"),
list(nome = "Finalizar transi√ß√£o para Funda√ß√£o", deadline = as.POSIXct("2025-03-06", format = "%Y-%m-%d", tz = "UTC"), responsavel = "Luize & Lucia"),
list(nome = "Rever aloca√ß√£o da equipe de opera√ß√£o", deadline = as.POSIXct("2025-03-06", format = "%Y-%m-%d", tz = "UTC"), responsavel = "Inocencio"),
list(nome = "Trabalhar a liga√ß√£o territorial e OCBs", deadline = as.POSIXct("2025-03-06", format = "%Y-%m-%d", tz = "UTC"), responsavel = "Lucia, Tania & Suraia"),
list(nome = "Calend√°rio chin√™s digital", deadline = as.POSIXct("2025-04-28", format = "%Y-%m-%d", tz = "UTC"), responsavel = "Dercio")
)
# Interface do usu√°rio (UI)
ui <- fluidPage(
theme = bs_theme(bg = "#6B4FA4", fg = "#30E3CA", primary = "#FF8F4E"),  # Aplica√ß√£o do tema baseado na identidade MUVA
tags$head(
tags$style(HTML("#relogio { font-size: 50px; text-align: center; font-weight: bold; color: #FF8F4E; } .card { padding: 20px; border-radius: 10px; box-shadow: 0px 0px 10px rgba(255, 255, 255, 0.1); margin-bottom: 15px; background-color: #512D6D; color: #FFFFFF; } .progress-bar { font-size: 14px; text-align: center; color: black; background-color: #30E3CA; } h3 { font-weight: bold; text-align: center; color: #FF8F4E; } .progress-bar-danger { background-color: #FF4C4C; }"))
),
div(class = "card",
h3("‚è≥ Controle de Prazos: Corra Que Ainda D√° Tempo!"),
div(id = "relogio", textOutput("contador")),  # Exibi√ß√£o do tempo restante
h4("Previs√£o de t√©rmino:", align = "center"),
tags$div(style = "text-align: center; font-size: 18px;", textOutput("previsao_termino"))
),
div(class = "card",
h3("üìä Planeamento em A√ß√£o: Porqu√™ Deixar para Depois?"),
uiOutput("lista_prioridades")  # Exibi√ß√£o din√¢mica das prioridades
)
)
# Servidor
server <- function(input, output, session) {
autoInvalidate <- reactiveTimer(1000)  # Atualiza√ß√£o autom√°tica a cada segundo
output$contador <- renderText({
autoInvalidate()
tempo_restante <- as.numeric(difftime(data_final, Sys.time(), units = "secs"))
if (tempo_restante > 0) {
dias <- as.integer(tempo_restante %/% (24 * 3600))
horas <- as.integer((tempo_restante %% (24 * 3600)) %/% 3600)
minutos <- as.integer((tempo_restante %% 3600) %/% 60)
segundos <- as.integer(tempo_restante %% 60)
sprintf("%02d dias | %02d:%02d:%02d", dias, horas, minutos, segundos)  # Formato grande e destacado
} else {
"00:00:00:00"
}
})
output$previsao_termino <- renderText({
format(data_final, "%d/%m/%Y %H:%M:%S")  # Exibi√ß√£o da data final formatada
})
output$lista_prioridades <- renderUI({
prioridades_ordenadas <- prioridades[order(sapply(prioridades, function(p) p$deadline), decreasing = TRUE)]
lapply(rev(prioridades_ordenadas), function(p) {
status <- ifelse(progresso >= 100, "Fora do prazo!", "A ser Realizado")
progresso <- max(0, min(100, as.numeric(difftime(Sys.time(), data_inicio, units = "secs")) / as.numeric(difftime(p$deadline, data_inicio, units = "secs")) * 100))
cor_barra <- ifelse(progresso >= 100, "progress-bar-danger", "progress-bar")
tagList(
h5(paste(p$nome, "- Data limite:", format(p$deadline, "%d/%m/%Y"))),  # Nome da prioridade e data limite
div(class = "progress",
div(class = paste("progress-bar", cor_barra),
role = "progressbar",
style = paste0("width: ", progresso, "%"),
ifelse(progresso >= 100, "Fora do prazo!", paste0(round(100 - progresso, 1), "% at√© o prazo final"))
)
),
p(style = "font-size: 14px; color: #30E3CA; display: flex; justify-content: space-between;",
span(paste("Respons√°vel:", p$responsavel)),
span(style = "margin-left: 2cm;", paste("Status:", status))),
span(style = "margin-left: auto;", paste("Status:", status)))),
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
